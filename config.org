* Lawrence Logoh's emacs config                                   :noexport:
* Contents                                                        :TOC:
- [[#quality-of-life][Quality of life]]
- [[#install-packages][Install Packages]]
- [[#productivity]["Productivity"]]
- [[#writing][Writing]]
- [[#programming][Programming]]
- [[#global-keybindings][Global Keybindings]]

* Quality of life
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

;; disable tool, menu and scroll bar
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)

;; function to reload configuration
(defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.config/emacs/config.org"))
      ) 

;; refresh buffer when file is modified on disk
(global-auto-revert-mode 1)

;; font
(add-to-list 'default-frame-alist
	       '(font . "Hack-14"))
(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%d-%m-%Y>" . "<%d-%m-%Y %H:%M>"))

;; theme
(custom-set-faces
 `(fringe ((t (:background nil)))))

(setq modus-themes-slanted-constructs t
      modus-themes-bold-constructs t)
(load-theme 'modus-vivendi)

(put 'dired-find-alternate-file 'disabled nil)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)

(setq backup-directory-alist '(("." . "~/.config/emacs/backups/"))
      backup-by-copying t    
      version-control t      
      delete-old-versions t  
      kept-new-versions 5   
      kept-old-versions 2    
      )

(setq auto-save-file-name-transforms
  `((".*" "~/.config/emacs/autosaves/" t)))
#+end_src

* Install Packages
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'go-mode)
(straight-use-package 'magit)
(straight-use-package 'reformatter)

(straight-use-package 'markdown-mode)
(straight-use-package 'olivetti)
(straight-use-package 'toc-org)
(straight-use-package 'org-tree-slide)
(straight-use-package 'htmlize)
(straight-use-package 'emmet-mode)



#+end_src


* "Productivity"
#+begin_src emacs-lisp
    (setq org-todo-keywords
	  '((sequence "TODO" "DOING" "WAITING" "|" "DONE" )))

    (setq org-todo-keyword-faces
	  '(("TODO" . "#a4202a")
	    ("DOING" . org-warning)
	    ("WAITING" . "#dbbe5f")
	    ))
  ;; Colors are from https://protesilaos.com/emacs/modus-themes-colors

  ;; Capture

  (setq org-default-notes-file (concat org-directory "~/lms/in.org"))

  (setq org-capture-templates
	'(("p" "personal action" entry (file+headline "~/lms/actions.org" "Personal")
	   "*** TODO %?\n  %i\n")
	  ("w" "work action" entry (file+headline "~/lms/actions.org" "Work")
	   "*** TODO %?\n  %i\n")
	  ("a" "agenda" entry (file+headline "~/lms/cal.org" "Calendar")
	   "** TODO %?\n  %i\n")
	  ("j" "journal entry" entry (file+headline "~/lms/journal.org" "Journal")
	   "\n* %(shell-command-to-string \"date '+%d-%m-%Y'\") %i %?")))


  ;; Agenda
  (setq org-agenda-files '("~/lms/cal.org"))

#+end_src


* Writing
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)

;; spellcheck
(add-hook 'text-mode-hook 'flyspell-mode)

;; toc-org
(if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)))

(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
  )

(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-src-fontify-natively t)

#+end_src


* Programming
#+begin_src emacs-lisp
;; formatting
(reformatter-define go-format
  :program "gofmt"
  :lighter " GF")


(reformatter-define python-format
  :program "black"
  :args '("-")
  :lighter " PYF")

(reformatter-define js-format
  :program "prettier"
  :args '("--write" "--parser" "babel-flow")
  :lighter " JSF")


;; code blocks
(setq org-confirm-babel-evaluate nil)
(setq org-edit-src-content-indentation 0)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t) (shell . t) (C . t) (js . t)))
;; general hooks
(add-hook 'prog-mode-hook 'linum-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
;; format hooks
(defvar my-format-modes '("go" "python" "js"))

(dolist (mode my-format-modes)
  (add-hook (intern (concat mode "-mode-hook"))
            (intern (concat mode "-format-on-save-mode"))))
#+end_src
* Global Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c t") 'ansi-term)
(global-set-key (kbd "C-c r") 'config-reload)
(global-set-key (kbd "M-<f2>") 'modus-themes-toggle) ; toggle light and dark modus themes
(global-set-key (kbd "C-z") 'replace-string)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "<f8>") 'org-tree-slide-mode)

#+end_src
